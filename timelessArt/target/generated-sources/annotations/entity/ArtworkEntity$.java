package entity;

import com.speedment.jpastreamer.field.BooleanField;
import com.speedment.jpastreamer.field.ComparableField;
import com.speedment.jpastreamer.field.IntField;
import com.speedment.jpastreamer.field.ReferenceField;
import com.speedment.jpastreamer.field.StringField;
import entity.ArtworkEntity.artworkStatus;
import entity.ArtworkEntity.typeArtwork;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.List;

/**
 * The generated base for entity {@link ArtworkEntity} representing entities of
 * the {@code artworkEntity}-table in the database.
 * <p> This file has been automatically generated by JPAStreamer.
 * 
 * @author JPAStreamer
 */
public final class ArtworkEntity$ {
    
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "height".
     */
    public static final ComparableField<ArtworkEntity, Float> height = ComparableField.create(
        ArtworkEntity.class,
        "height",
        ArtworkEntity::getHeight,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "price".
     */
    public static final ComparableField<ArtworkEntity, BigDecimal> price = ComparableField.create(
        ArtworkEntity.class,
        "price",
        ArtworkEntity::getPrice,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "artist".
     */
    public static final ReferenceField<ArtworkEntity, ArtistEntity> artist = ReferenceField.create(
        ArtworkEntity.class,
        "artist",
        ArtworkEntity::getArtist,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "frame".
     */
    public static final BooleanField<ArtworkEntity> frame = BooleanField.create(
        ArtworkEntity.class,
        "frame",
        ArtworkEntity::isFrame,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "reviews".
     */
    public static final ReferenceField<ArtworkEntity, List<ReviewEntity>> reviews = ReferenceField.create(
        ArtworkEntity.class,
        "reviews",
        ArtworkEntity::getReviews,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "image".
     */
    public static final ReferenceField<ArtworkEntity, List<ImageEntity>> image = ReferenceField.create(
        ArtworkEntity.class,
        "image",
        ArtworkEntity::getImage,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "id".
     */
    public static final IntField<ArtworkEntity> id = IntField.create(
        ArtworkEntity.class,
        "id",
        ArtworkEntity::getId,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "video".
     */
    public static final ReferenceField<ArtworkEntity, List<VideoEntity>> video = ReferenceField.create(
        ArtworkEntity.class,
        "video",
        ArtworkEntity::getVideo,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "artworkType".
     */
    public static final ComparableField<ArtworkEntity, typeArtwork> artworkType = ComparableField.create(
        ArtworkEntity.class,
        "artworkType",
        ArtworkEntity::getArtworkType,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "description".
     */
    public static final StringField<ArtworkEntity> description = StringField.create(
        ArtworkEntity.class,
        "description",
        ArtworkEntity::getDescription,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "status".
     */
    public static final ComparableField<ArtworkEntity, artworkStatus> status = ComparableField.create(
        ArtworkEntity.class,
        "status",
        ArtworkEntity::getStatus,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "order".
     */
    public static final ReferenceField<ArtworkEntity, OrderEntity> order = ReferenceField.create(
        ArtworkEntity.class,
        "order",
        ArtworkEntity::getOrder,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "title".
     */
    public static final StringField<ArtworkEntity> title = StringField.create(
        ArtworkEntity.class,
        "title",
        ArtworkEntity::getTitle,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "exhibition".
     */
    public static final ReferenceField<ArtworkEntity, ExhibitionEntity> exhibition = ReferenceField.create(
        ArtworkEntity.class,
        "exhibition",
        ArtworkEntity::getExhibition,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "technique".
     */
    public static final StringField<ArtworkEntity> technique = StringField.create(
        ArtworkEntity.class,
        "technique",
        ArtworkEntity::getTechnique,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "width".
     */
    public static final ComparableField<ArtworkEntity, Float> width = ComparableField.create(
        ArtworkEntity.class,
        "width",
        ArtworkEntity::getWidth,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "artworkDate".
     */
    public static final ComparableField<ArtworkEntity, Date> artworkDate = ComparableField.create(
        ArtworkEntity.class,
        "artworkDate",
        ArtworkEntity::getArtworkDate,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "length".
     */
    public static final ComparableField<ArtworkEntity, Float> length = ComparableField.create(
        ArtworkEntity.class,
        "length",
        ArtworkEntity::getLength,
        false
    );
    /**
     * This Field corresponds to the {@link ArtworkEntity} field "addingDate".
     */
    public static final ComparableField<ArtworkEntity, Timestamp> addingDate = ComparableField.create(
        ArtworkEntity.class,
        "addingDate",
        ArtworkEntity::getAddingDate,
        false
    );
}